@mixin formBuilder($options: (), $widgetInstanceId: "", $widgetInstanceUUID: "") {
  $configuration: map-merge(
    (
      formWidth: $formWidth,
      formMinWidth: $formMinWidth,
      formMaxWidth: $formMaxWidth,
      formPosition: $formPosition,
      formPositionTop: $formPositionTop,
      formPositionRight: $formPositionRight,
      formPositionBottom: $formPositionBottom,
      formPositionLeft: $formPositionLeft,
      formIndex: $formIndex,
      formDisplay: $formDisplay,
      formMarginAlign: $formMarginAlign,
      formMarginTop: $formMarginTop,
      formMarginRight: $formMarginRight,
      formMarginBottom: $formMarginBottom,
      formMarginLeft: $formMarginLeft,
      formPaddingTop: $formPaddingTop,
      formPaddingRight: $formPaddingRight,
      formPaddingBottom: $formPaddingBottom,
      formPaddingLeft: $formPaddingLeft,
      formLabelFontFam: $formLabelFontFam,
      formLabelSize: $formLabelSize,
      formLabelColor: $formLabelColor,
      formLabelWeight: $formLabelWeight,
      formLabelStyle: $formLabelStyle,
      formLabelDecoration: $formLabelDecoration,
      formInputBorderSides: $formInputBorderSides,
      formInputBorderWidth: $formInputBorderWidth,
      formInputBorderStyle: $formInputBorderStyle,
      formInputBorderColor: $formInputBorderColor,
      formInputBorderRadius: $formInputBorderRadius,
      formInputBorderFocusSides: $formInputBorderFocusSides,
      formInputBorderFocusWidth: $formInputBorderFocusWidth,
      formInputBorderFocusStyle: $formInputBorderFocusStyle,
      formInputBorderFocusColor: $formInputBorderFocusColor,
      formInputBorderFocusRadius: $formInputBorderFocusRadius,
      formInputBorderErrorSides: $formInputBorderErrorSides,
      formInputBorderErrorWidth: $formInputBorderErrorWidth,
      formInputBorderErrorStyle: $formInputBorderErrorStyle,
      formInputBorderErrorColor: $formInputBorderErrorColor,
      formInputBorderErrorRadius: $formInputBorderErrorRadius,
      formInputPaddingTop: $formInputPaddingTop,
      formInputPaddingRight: $formInputPaddingRight,
      formInputPaddingBottom: $formInputPaddingBottom,
      formInputPaddingLeft: $formInputPaddingLeft,
      formTextInputsFontFamily: $formTextInputsFontFamily,
      formTextInputsFontSize: $formTextInputsFontSize,
      formTextInputsFontColor: $formTextInputsFontColor,
      formTextInputsFontWeight: $formTextInputsFontWeight,
      formTextInputsItalic: $formTextInputsItalic,
      formTextInputsUnderline: $formTextInputsUnderline,
      formTextInputsLineHeight: $formTextInputsLineHeight,
      formTextInputsPlaceholderFontFamily: $formTextInputsPlaceholderFontFamily,
      formTextInputsPlaceholderFontSize: $formTextInputsPlaceholderFontSize,
      formTextInputsPlaceholderFontColor: $formTextInputsPlaceholderFontColor,
      formTextInputsPlaceholderFontWeight: $formTextInputsPlaceholderFontWeight,
      formTextInputsPlaceholderItalic: $formTextInputsPlaceholderItalic,
      formTextInputsPlaceholderUnderline: $formTextInputsPlaceholderUnderline,
      formTextInputsPlaceholderLineHeight: $formTextInputsPlaceholderLineHeight,
      formErrorTextFontFamily: $formErrorTextFontFamily,
      formErrorTextFontSize: $formErrorTextFontSize,
      formErrorTextFontColor: $formErrorTextFontColor,
      formErrorTextFontWeight: $formErrorTextFontWeight,
      formErrorTextItalic: $formErrorTextItalic,
      formErrorTextUnderline: $formErrorTextUnderline,
      formErrorTextLineHeight: $formErrorTextLineHeight,
      formToggleBackgroundColor: $formToggleBackgroundColor,
      formToggleBorderColor: $formToggleBorderColor,
      formToggleColor: $formToggleColor,
      formToggleActiveBackgroundColor: $formToggleActiveBackgroundColor,
      formSelectTextColor: $formSelectTextColor,
      formSelectArrowBackground: $formSelectArrowBackground,
      formSelectArrow: $formSelectArrow,
      formStarRating: $formStarRating,
      formStarRatingSelected: $formStarRatingSelected,
      formSignatureFieldBackgroundColor: $formSignatureFieldBackgroundColor,
      formSignatureClearTextColor: $formSignatureClearTextColor,
      formSignatureClearTextColorActive: $formSignatureClearTextColorActive,
      formRequiredColor: $formRequiredColor,
      formVisibility: $formVisibility,
      formWidthTablet: $formWidthTablet,
      formMinWidthTablet: $formMinWidthTablet,
      formMaxWidthTablet: $formMaxWidthTablet,
      formPositionTablet: $formPositionTablet,
      formPositionTopTablet: $formPositionTopTablet,
      formPositionRightTablet: $formPositionRightTablet,
      formPositionBottomTablet: $formPositionBottomTablet,
      formPositionLeftTablet: $formPositionLeftTablet,
      formIndexTablet: $formIndexTablet,
      formDisplayTablet: $formDisplayTablet,
      formMarginAlignTablet: $formMarginAlignTablet,
      formMarginTopTablet: $formMarginTopTablet,
      formMarginRightTablet: $formMarginRightTablet,
      formMarginBottomTablet: $formMarginBottomTablet,
      formMarginLeftTablet: $formMarginLeftTablet,
      formPaddingTopTablet: $formPaddingTopTablet,
      formPaddingRightTablet: $formPaddingRightTablet,
      formPaddingBottomTablet: $formPaddingBottomTablet,
      formPaddingLeftTablet: $formPaddingLeftTablet,
      formLabelFontFamTablet: $formLabelFontFamTablet,
      formLabelSizeTablet: $formLabelSizeTablet,
      formLabelColorTablet: $formLabelColorTablet,
      formLabelWeightTablet: $formLabelWeightTablet,
      formLabelStyleTablet: $formLabelStyleTablet,
      formLabelDecorationTablet: $formLabelDecorationTablet,
      formInputBorderSidesTablet: $formInputBorderSidesTablet,
      formInputBorderWidthTablet: $formInputBorderWidthTablet,
      formInputBorderStyleTablet: $formInputBorderStyleTablet,
      formInputBorderColorTablet: $formInputBorderColorTablet,
      formInputBorderRadiusTablet: $formInputBorderRadiusTablet,
      formInputBorderFocusSidesTablet: $formInputBorderFocusSidesTablet,
      formInputBorderFocusWidthTablet: $formInputBorderFocusWidthTablet,
      formInputBorderFocusStyleTablet: $formInputBorderFocusStyleTablet,
      formInputBorderFocusColorTablet: $formInputBorderFocusColorTablet,
      formInputBorderFocusRadiusTablet: $formInputBorderFocusRadiusTablet,
      formInputBorderErrorSidesTablet: $formInputBorderErrorSidesTablet,
      formInputBorderErrorWidthTablet: $formInputBorderErrorWidthTablet,
      formInputBorderErrorStyleTablet: $formInputBorderErrorStyleTablet,
      formInputBorderErrorColorTablet: $formInputBorderErrorColorTablet,
      formInputBorderErrorRadiusTablet: $formInputBorderErrorRadiusTablet,
      formInputPaddingTopTablet: $formInputPaddingTopTablet,
      formInputPaddingRightTablet: $formInputPaddingRightTablet,
      formInputPaddingBottomTablet: $formInputPaddingBottomTablet,
      formInputPaddingLeftTablet: $formInputPaddingLeftTablet,
      formTextInputsFontFamilyTablet: $formTextInputsFontFamilyTablet,
      formTextInputsFontSizeTablet: $formTextInputsFontSizeTablet,
      formTextInputsFontColorTablet: $formTextInputsFontColorTablet,
      formTextInputsFontWeightTablet: $formTextInputsFontWeightTablet,
      formTextInputsItalicTablet: $formTextInputsItalicTablet,
      formTextInputsUnderlineTablet: $formTextInputsUnderlineTablet,
      formTextInputsLineHeightTablet: $formTextInputsLineHeightTablet,
      formTextInputsPlaceholderFontFamilyTablet: $formTextInputsPlaceholderFontFamilyTablet,
      formTextInputsPlaceholderFontSizeTablet: $formTextInputsPlaceholderFontSizeTablet,
      formTextInputsPlaceholderFontColorTablet: $formTextInputsPlaceholderFontColorTablet,
      formTextInputsPlaceholderFontWeightTablet: $formTextInputsPlaceholderFontWeightTablet,
      formTextInputsPlaceholderItalicTablet: $formTextInputsPlaceholderItalicTablet,
      formTextInputsPlaceholderUnderlineTablet: $formTextInputsPlaceholderUnderlineTablet,
      formTextInputsPlaceholderLineHeightTablet: $formTextInputsPlaceholderLineHeightTablet,
      formErrorTextFontFamilyTablet: $formErrorTextFontFamilyTablet,
      formErrorTextFontSizeTablet: $formErrorTextFontSizeTablet,
      formErrorTextFontColorTablet: $formErrorTextFontColorTablet,
      formErrorTextFontWeightTablet: $formErrorTextFontWeightTablet,
      formErrorTextItalicTablet: $formErrorTextItalicTablet,
      formErrorTextUnderlineTablet: $formErrorTextUnderlineTablet,
      formErrorTextLineHeightTablet: $formErrorTextLineHeightTablet,
      formToggleBackgroundColorTablet: $formToggleBackgroundColorTablet,
      formToggleBorderColorTablet: $formToggleBorderColorTablet,
      formToggleColorTablet: $formToggleColorTablet,
      formToggleActiveBackgroundColorTablet: $formToggleActiveBackgroundColorTablet,
      formSelectTextColorTablet: $formSelectTextColorTablet,
      formSelectArrowBackgroundTablet: $formSelectArrowBackgroundTablet,
      formSelectArrowTablet: $formSelectArrowTablet,
      formStarRatingTablet: $formStarRatingTablet,
      formStarRatingSelectedTablet: $formStarRatingSelectedTablet,
      formSignatureFieldBackgroundColorTablet: $formSignatureFieldBackgroundColorTablet,
      formSignatureClearTextColorTablet: $formSignatureClearTextColorTablet,
      formSignatureClearTextColorActiveTablet: $formSignatureClearTextColorActiveTablet,
      formRequiredColorTablet: $formRequiredColorTablet,
      formVisibilityTablet: $formVisibilityTablet,
      formWidthDesktop: $formWidthDesktop,
      formMinWidthDesktop: $formMinWidthDesktop,
      formMaxWidthDesktop: $formMaxWidthDesktop,
      formPositionDesktop: $formPositionDesktop,
      formPositionTopDesktop: $formPositionTopDesktop,
      formPositionRightDesktop: $formPositionRightDesktop,
      formPositionBottomDesktop: $formPositionBottomDesktop,
      formPositionLeftDesktop: $formPositionLeftDesktop,
      formIndexDesktop: $formIndexDesktop,
      formDisplayDesktop: $formDisplayDesktop,
      formMarginAlignDesktop: $formMarginAlignDesktop,
      formMarginTopDesktop: $formMarginTopDesktop,
      formMarginRightDesktop: $formMarginRightDesktop,
      formMarginBottomDesktop: $formMarginBottomDesktop,
      formMarginLeftDesktop: $formMarginLeftDesktop,
      formPaddingTopDesktop: $formPaddingTopDesktop,
      formPaddingRightDesktop: $formPaddingRightDesktop,
      formPaddingBottomDesktop: $formPaddingBottomDesktop,
      formPaddingLeftDesktop: $formPaddingLeftDesktop,
      formLabelFontFamDesktop: $formLabelFontFamDesktop,
      formLabelSizeDesktop: $formLabelSizeDesktop,
      formLabelColorDesktop: $formLabelColorDesktop,
      formLabelWeightDesktop: $formLabelWeightDesktop,
      formLabelStyleDesktop: $formLabelStyleDesktop,
      formLabelDecorationDesktop: $formLabelDecorationDesktop,
      formInputBorderSidesDesktop: $formInputBorderSidesDesktop,
      formInputBorderWidthDesktop: $formInputBorderWidthDesktop,
      formInputBorderStyleDesktop: $formInputBorderStyleDesktop,
      formInputBorderColorDesktop: $formInputBorderColorDesktop,
      formInputBorderRadiusDesktop: $formInputBorderRadiusDesktop,
      formInputBorderFocusSidesDesktop: $formInputBorderFocusSidesDesktop,
      formInputBorderFocusWidthDesktop: $formInputBorderFocusWidthDesktop,
      formInputBorderFocusStyleDesktop: $formInputBorderFocusStyleDesktop,
      formInputBorderFocusColorDesktop: $formInputBorderFocusColorDesktop,
      formInputBorderFocusRadiusDesktop: $formInputBorderFocusRadiusDesktop,
      formInputBorderErrorSidesDesktop: $formInputBorderErrorSidesDesktop,
      formInputBorderErrorWidthDesktop: $formInputBorderErrorWidthDesktop,
      formInputBorderErrorStyleDesktop: $formInputBorderErrorStyleDesktop,
      formInputBorderErrorColorDesktop: $formInputBorderErrorColorDesktop,
      formInputBorderErrorRadiusDesktop: $formInputBorderErrorRadiusDesktop,
      formInputPaddingTopDesktop: $formInputPaddingTopDesktop,
      formInputPaddingRightDesktop: $formInputPaddingRightDesktop,
      formInputPaddingBottomDesktop: $formInputPaddingBottomDesktop,
      formInputPaddingLeftDesktop: $formInputPaddingLeftDesktop,
      formTextInputsFontFamilyDesktop: $formTextInputsFontFamilyDesktop,
      formTextInputsFontSizeDesktop: $formTextInputsFontSizeDesktop,
      formTextInputsFontColorDesktop: $formTextInputsFontColorDesktop,
      formTextInputsFontWeightDesktop: $formTextInputsFontWeightDesktop,
      formTextInputsItalicDesktop: $formTextInputsItalicDesktop,
      formTextInputsUnderlineDesktop: $formTextInputsUnderlineDesktop,
      formTextInputsLineHeightDesktop: $formTextInputsLineHeightDesktop,
      formTextInputsPlaceholderFontFamilyDesktop: $formTextInputsPlaceholderFontFamilyDesktop,
      formTextInputsPlaceholderFontSizeDesktop: $formTextInputsPlaceholderFontSizeDesktop,
      formTextInputsPlaceholderFontColorDesktop: $formTextInputsPlaceholderFontColorDesktop,
      formTextInputsPlaceholderFontWeightDesktop: $formTextInputsPlaceholderFontWeightDesktop,
      formTextInputsPlaceholderItalicDesktop: $formTextInputsPlaceholderItalicDesktop,
      formTextInputsPlaceholderUnderlineDesktop: $formTextInputsPlaceholderUnderlineDesktop,
      formTextInputsPlaceholderLineHeightDesktop: $formTextInputsPlaceholderLineHeightDesktop,
      formErrorTextFontFamilyDesktop: $formErrorTextFontFamilyDesktop,
      formErrorTextFontSizeDesktop: $formErrorTextFontSizeDesktop,
      formErrorTextFontColorDesktop: $formErrorTextFontColorDesktop,
      formErrorTextFontWeightDesktop: $formErrorTextFontWeightDesktop,
      formErrorTextItalicDesktop: $formErrorTextItalicDesktop,
      formErrorTextUnderlineDesktop: $formErrorTextUnderlineDesktop,
      formErrorTextLineHeightDesktop: $formErrorTextLineHeightDesktop,
      formToggleBackgroundColorDesktop: $formToggleBackgroundColorDesktop,
      formToggleBorderColorDesktop: $formToggleBorderColorDesktop,
      formToggleColorDesktop: $formToggleColorDesktop,
      formToggleActiveBackgroundColorDesktop: $formToggleActiveBackgroundColorDesktop,
      formSelectTextColorDesktop: $formSelectTextColorDesktop,
      formSelectArrowBackgroundDesktop: $formSelectArrowBackgroundDesktop,
      formSelectArrowDesktop: $formSelectArrowDesktop,
      formStarRatingDesktop: $formStarRatingDesktop,
      formStarRatingSelectedDesktop: $formStarRatingSelectedDesktop,
      formSignatureFieldBackgroundColorDesktop: $formSignatureFieldBackgroundColorDesktop,
      formSignatureClearTextColorDesktop: $formSignatureClearTextColorDesktop,
      formSignatureClearTextColorActiveDesktop: $formSignatureClearTextColorActiveDesktop,
      formRequiredColorDesktop: $formRequiredColorDesktop,
      formVisibilityDesktop: $formVisibilityDesktop,
      primaryButtonPaddingRightTablet: $primaryButtonPaddingRightTablet,
      primaryButtonPaddingRightDesktop: $primaryButtonPaddingRightDesktop,
      formReadOnlyBackgroundColor: $formReadOnlyBackgroundColor,
      formReadOnlyBackgroundColorTablet: $formReadOnlyBackgroundColorTablet,
      formReadOnlyBackgroundColorDesktop: $formReadOnlyBackgroundColorDesktop,
      formReadOnlySelectedFillColor: $formReadOnlySelectedFillColor,
      formReadOnlySelectedFillColorTablet: $formReadOnlySelectedFillColorTablet,
      formReadOnlySelectedFillColorDesktop: $formReadOnlySelectedFillColorDesktop
    ),
    $options
  );

  $spinnerColor: lighten($bodyTextColor, 33%);
  $spinnerColorTablet: lighten($bodyTextColorTablet, 33%);
  $spinnerColorDesktop: lighten($bodyTextColorDesktop, 33%);

  $instanceSelector: '[data-widget-package="com.fliplet.form-builder"]';
  @if $widgetInstanceUUID != "" {
    $instanceSelector: '#{$instanceSelector}[data-uuid="#{$widgetInstanceUUID}"]';
  } @else if $widgetInstanceId != "" {
    $instanceSelector: '#{$instanceSelector}[data-id="#{$widgetInstanceId}"]';
  }

  #{$instanceSelector} {
    position: map-get($configuration, formPosition) !important;
    z-index: map-get($configuration, formIndex);

    @if map-get($configuration, formPosition) == "relative" {
      @if map-get($configuration, formVisibility) == "visible" {
        display: map-get($configuration, formDisplay) !important;
      } @else {
        display: none !important;
      }
    } @else {
      @if map-get($configuration, formVisibility) == "visible" {
        display: block !important;
      } @else {
        display: none !important;
      }

      top: map-get($configuration, formPositionTop);
      right: map-get($configuration, formPositionRight);
      bottom: map-get($configuration, formPositionBottom);
      left: map-get($configuration, formPositionLeft);
    }

    width: map-get($configuration, formWidth);
    min-width: map-get($configuration, formMinWidth);
    max-width: map-get($configuration, formMaxWidth);
    margin: map-get($configuration, formMarginTop) map-get($configuration, formMarginRight)
      map-get($configuration, formMarginBottom) map-get($configuration, formMarginLeft);
    padding: map-get($configuration, formPaddingTop) map-get($configuration, formPaddingRight)
      map-get($configuration, formPaddingBottom) map-get($configuration, formPaddingLeft);

    @include above($tabletBreakpoint) {
      position: map-get($configuration, formPositionTablet) !important;
      z-index: map-get($configuration, formIndexTablet);

      @if map-get($configuration, formPositionTablet) == "relative" {
        @if map-get($configuration, formVisibilityTablet) == "visible" {
          display: map-get($configuration, formDisplayTablet) !important;
        } @else {
          display: none !important;
        }
      } @else {
        @if map-get($configuration, formVisibilityTablet) == "visible" {
          display: block !important;
        } @else {
          display: none !important;
        }

        top: map-get($configuration, formPositionTopTablet);
        right: map-get($configuration, formPositionRightTablet);
        bottom: map-get($configuration, formPositionBottomTablet);
        left: map-get($configuration, formPositionLeftTablet);
      }

      width: map-get($configuration, formWidthTablet);
      min-width: map-get($configuration, formMinWidthTablet);
      max-width: map-get($configuration, formMaxWidthTablet);
      margin: map-get($configuration, formMarginTopTablet)
        map-get($configuration, formMarginRightTablet)
        map-get($configuration, formMarginBottomTablet)
        map-get($configuration, formMarginLeftTablet);
      padding: map-get($configuration, formPaddingTopTablet)
        map-get($configuration, formPaddingRightTablet)
        map-get($configuration, formPaddingBottomTablet)
        map-get($configuration, formPaddingLeftTablet);
    }

    @include above($desktopBreakpoint) {
      position: map-get($configuration, formPositionDesktop) !important;
      z-index: map-get($configuration, formIndexDesktop);

      @if map-get($configuration, formPositionDesktop) == "relative" {
        @if map-get($configuration, formVisibilityDesktop) == "visible" {
          display: map-get($configuration, formDisplayDesktop) !important;
        } @else {
          display: none !important;
        }
      } @else {
        @if map-get($configuration, formVisibilityDesktop) == "visible" {
          display: block !important;
        } @else {
          display: none !important;
        }

        top: map-get($configuration, formPositionTopDesktop);
        right: map-get($configuration, formPositionRightDesktop);
        bottom: map-get($configuration, formPositionBottomDesktop);
        left: map-get($configuration, formPositionLeftDesktop);
      }

      width: map-get($configuration, formWidthDesktop);
      min-width: map-get($configuration, formMinWidthDesktop);
      max-width: map-get($configuration, formMaxWidthDesktop);
      margin: map-get($configuration, formMarginTopDesktop)
        map-get($configuration, formMarginRightDesktop)
        map-get($configuration, formMarginBottomDesktop)
        map-get($configuration, formMarginLeftDesktop);
      padding: map-get($configuration, formPaddingTopDesktop)
        map-get($configuration, formPaddingRightDesktop)
        map-get($configuration, formPaddingBottomDesktop)
        map-get($configuration, formPaddingLeftDesktop);
    }

    .form-group {
      input.form-control {
        @include fontOnly(
          (
            fontFamily: map-get($configuration, formTextInputsFontFamily),
            fontSize: map-get($configuration, formTextInputsFontSize),
            fontLineHeight: map-get($configuration, formTextInputsLineHeight),
            fontWeight: map-get($configuration, formTextInputsFontWeight),
            fontStyle: map-get($configuration, formTextInputsItalic),
            fontDecoration: map-get($configuration, formTextInputsUnderline)
          )
        );

        color: map-get($configuration, formTextInputsFontColor);

        &:read-only {
          background-color: map-get($configuration, formReadOnlyBackgroundColor);
        }

        &::placeholder {
          @include fontOnly(
            (
              fontFamily: map-get($configuration, formTextInputsPlaceholderFontFamily),
              fontSize: map-get($configuration, formTextInputsPlaceholderFontSize),
              fontLineHeight: map-get($configuration, formTextInputsPlaceholderLineHeight),
              fontWeight: map-get($configuration, formTextInputsPlaceholderFontWeight),
              fontStyle: map-get($configuration, formTextInputsPlaceholderItalic),
              fontDecoration: map-get($configuration, formTextInputsPlaceholderUnderline)
            )
          );

          color: map-get($configuration, formTextInputsPlaceholderFontColor);
        }

        // Styles for tablet
        @include above($tabletBreakpoint) {
          @include fontOnly(
            (
              fontFamily: map-get($configuration, formTextInputsFontFamilyTablet),
              fontSize: map-get($configuration, formTextInputsFontSizeTablet),
              fontLineHeight: map-get($configuration, formTextInputsLineHeightTablet),
              fontWeight: map-get($configuration, formTextInputsFontWeightTablet),
              fontStyle: map-get($configuration, formTextInputsItalicTablet),
              fontDecoration: map-get($configuration, formTextInputsUnderlineTablet)
            )
          );

          color: map-get($configuration, formTextInputsFontColorTablet);

          &:read-only {
            background-color: map-get($configuration, formReadOnlyBackgroundColorTablet);
          }

          &::placeholder {
            @include fontOnly(
              (
                fontFamily: map-get($configuration, formTextInputsPlaceholderFontFamilyTablet),
                fontSize: map-get($configuration, formTextInputsPlaceholderFontSizeTablet),
                fontLineHeight: map-get($configuration, formTextInputsPlaceholderLineHeightTablet),
                fontWeight: map-get($configuration, formTextInputsPlaceholderFontWeightTablet),
                fontStyle: map-get($configuration, formTextInputsPlaceholderItalicTablet),
                fontDecoration: map-get($configuration, formTextInputsPlaceholderUnderlineTablet)
              )
            );

            color: map-get($configuration, formTextInputsPlaceholderFontColorTablet);
          }
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          @include fontOnly(
            (
              fontFamily: map-get($configuration, formTextInputsFontFamilyDesktop),
              fontSize: map-get($configuration, formTextInputsFontSizeDesktop),
              fontLineHeight: map-get($configuration, formTextInputsLineHeightDesktop),
              fontWeight: map-get($configuration, formTextInputsFontWeightDesktop),
              fontStyle: map-get($configuration, formTextInputsItalicDesktop),
              fontDecoration: map-get($configuration, formTextInputsUnderlineDesktop)
            )
          );

          color: map-get($configuration, formTextInputsFontColorDesktop);

          &:read-only {
            background-color: map-get($configuration, formReadOnlyBackgroundColorDesktop);
          }

          &::placeholder {
            @include fontOnly(
              (
                fontFamily: map-get($configuration, formTextInputsPlaceholderFontFamilyDesktop),
                fontSize: map-get($configuration, formTextInputsPlaceholderFontSizeDesktop),
                fontLineHeight: map-get($configuration, formTextInputsPlaceholderLineHeightDesktop),
                fontWeight: map-get($configuration, formTextInputsPlaceholderFontWeightDesktop),
                fontStyle: map-get($configuration, formTextInputsPlaceholderItalicDesktop),
                fontDecoration: map-get($configuration, formTextInputsPlaceholderUnderlineDesktop)
              )
            );

            color: map-get($configuration, formTextInputsPlaceholderFontColorDesktop);
          }
        }
      }

      .control-label {
        label {
          color: map-get($configuration, formLabelColor);
          font-size: map-get($configuration, formLabelSize);
          font-family: map-get($configuration, formLabelFontFam);
          font-weight: map-get($configuration, formLabelWeight);
          font-style: map-get($configuration, formLabelStyle);
          text-decoration: map-get($configuration, formLabelDecoration);

          // Styles for tablet
          @include above($tabletBreakpoint) {
            color: map-get($configuration, formLabelColorTablet);
            font-size: map-get($configuration, formLabelSizeTablet);
            font-family: map-get($configuration, formLabelFontFamTablet);
            font-weight: map-get($configuration, formLabelWeightTablet);
            font-style: map-get($configuration, formLabelStyleTablet);
            text-decoration: map-get($configuration, formLabelDecorationTablet);
          }

          // Styles for desktop
          @include above($desktopBreakpoint) {
            color: map-get($configuration, formLabelColorDesktop);
            font-size: map-get($configuration, formLabelSizeDesktop);
            font-family: map-get($configuration, formLabelFontFamDesktop);
            font-weight: map-get($configuration, formLabelWeightDesktop);
            font-style: map-get($configuration, formLabelStyleDesktop);
            text-decoration: map-get($configuration, formLabelDecorationDesktop);
          }
        }
      }

      label {
        &.control-label {
          color: map-get($configuration, formLabelColor);
          font-size: map-get($configuration, formLabelSize);
          font-family: map-get($configuration, formLabelFontFam);
          font-weight: map-get($configuration, formLabelWeight);
          font-style: map-get($configuration, formLabelStyle);
          text-decoration: map-get($configuration, formLabelDecoration);

          // Styles for tablet
          @include above($tabletBreakpoint) {
            color: map-get($configuration, formLabelColorTablet);
            font-size: map-get($configuration, formLabelSizeTablet);
            font-family: map-get($configuration, formLabelFontFamTablet);
            font-weight: map-get($configuration, formLabelWeightTablet);
            font-style: map-get($configuration, formLabelStyleTablet);
            text-decoration: map-get($configuration, formLabelDecorationTablet);
          }

          // Styles for desktop
          @include above($desktopBreakpoint) {
            color: map-get($configuration, formLabelColorDesktop);
            font-size: map-get($configuration, formLabelSizeDesktop);
            font-family: map-get($configuration, formLabelFontFamDesktop);
            font-weight: map-get($configuration, formLabelWeightDesktop);
            font-style: map-get($configuration, formLabelStyleDesktop);
            text-decoration: map-get($configuration, formLabelDecorationDesktop);
          }
        }
      }

      .input-group {
        .form-control {
          border-top-left-radius: map-get($configuration, formInputBorderRadius);
          border-bottom-left-radius: map-get($configuration, formInputBorderRadius);
          padding-left: calc(45px + #{map-get($configuration, formInputPaddingLeft)});

          // Styles for tablet
          @include above($tabletBreakpoint) {
            border-top-left-radius: map-get($configuration, formInputBorderRadiusTablet);
            border-bottom-left-radius: map-get($configuration, formInputBorderRadiusTablet);
            padding-left: calc(45px + #{map-get($configuration, formInputPaddingLeftTablet)});
          }

          // Styles for desktop
          @include above($desktopBreakpoint) {
            border-top-left-radius: map-get($configuration, formInputBorderRadiusDesktop);
            border-bottom-left-radius: map-get($configuration, formInputBorderRadiusDesktop);
            padding-left: calc(45px + #{map-get($configuration, formInputPaddingLeftDesktop)});
          }
        }
      }
    }

    .has-error {
      .text-danger {
        @include fontOnly(
          (
            fontFamily: map-get($configuration, formErrorTextFontFamily),
            fontSize: map-get($configuration, formErrorTextFontSize),
            fontLineHeight: map-get($configuration, formErrorTextLineHeight),
            fontWeight: map-get($configuration, formErrorTextFontWeight),
            fontStyle: map-get($configuration, formErrorTextItalic),
            fontDecoration: map-get($configuration, formErrorTextUnderline)
          )
        );

        color: map-get($configuration, formErrorTextFontColor);

        @include above($tabletBreakpoint) {
          @include fontOnly(
            (
              fontFamily: map-get($configuration, formErrorTextFontFamilyTablet),
              fontSize: map-get($configuration, formErrorTextFontSizeTablet),
              fontLineHeight: map-get($configuration, formErrorTextLineHeightTablet),
              fontWeight: map-get($configuration, formErrorTextFontWeightTablet),
              fontStyle: map-get($configuration, formErrorTextItalicTablet),
              fontDecoration: map-get($configuration, formErrorTextUnderlineTablet)
            )
          );

          color: map-get($configuration, formErrorTextFontColorTablet);
        }

        @include above($desktopBreakpoint) {
          @include fontOnly(
            (
              fontFamily: map-get($configuration, formErrorTextFontFamilyDesktop),
              fontSize: map-get($configuration, formErrorTextFontSizeDesktop),
              fontLineHeight: map-get($configuration, formErrorTextLineHeightDesktop),
              fontWeight: map-get($configuration, formErrorTextFontWeightDesktop),
              fontStyle: map-get($configuration, formErrorTextItalicDesktop),
              fontDecoration: map-get($configuration, formErrorTextUnderlineDesktop)
            )
          );

          color: map-get($configuration, formErrorTextFontColorDesktop);
        }
      }

      .form-control {
        @include borderOnly(
          (
            borderSides: map-get($configuration, formInputBorderErrorSides),
            borderWidth: map-get($configuration, formInputBorderErrorWidth),
            borderStyle: map-get($configuration, formInputBorderErrorStyle),
            borderColor: map-get($configuration, formInputBorderErrorColor)
          )
        );
        border-radius: map-get($configuration, formInputBorderErrorRadius);

        @include above($tabletBreakpoint) {
          @include borderOnly(
            (
              borderSides: map-get($configuration, formInputBorderErrorSidesTablet),
              borderWidth: map-get($configuration, formInputBorderErrorWidthTablet),
              borderStyle: map-get($configuration, formInputBorderErrorStyleTablet),
              borderColor: map-get($configuration, formInputBorderErrorColorTablet)
            )
          );
          border-radius: map-get($configuration, formInputBorderErrorRadiusTablet);
        }

        @include above($desktopBreakpoint) {
          @include borderOnly(
            (
              borderSides: map-get($configuration, formInputBorderErrorSidesDesktop),
              borderWidth: map-get($configuration, formInputBorderErrorWidthDesktop),
              borderStyle: map-get($configuration, formInputBorderErrorStyleDesktop),
              borderColor: map-get($configuration, formInputBorderErrorColorDesktop)
            )
          );
          border-radius: map-get($configuration, formInputBorderErrorRadiusDesktop);
        }
      }

      .form-group.fl-date-picker,
      .form-group.fl-time-picker {
        > .form-control {
          @include borderOnly(
            (
              borderSides: map-get($configuration, formInputBorderErrorSides),
              borderWidth: map-get($configuration, formInputBorderErrorWidth),
              borderStyle: map-get($configuration, formInputBorderErrorStyle),
              borderColor: map-get($configuration, formInputBorderErrorColor)
            )
          );
          border-radius: map-get($configuration, formInputBorderErrorRadius);

          &:focus {
            @include borderOnly(
              (
                borderSides: map-get($configuration, formInputBorderErrorFocusSides),
                borderWidth: map-get($configuration, formInputBorderErrorFocusWidth),
                borderStyle: map-get($configuration, formInputBorderErrorFocusStyle),
                borderColor: map-get($configuration, formInputBorderErrorFocusColor)
              )
            );
            border-radius: map-get($configuration, formInputBorderErrorFocusRadius);
          }

          // Styles for tablet
          @include above($tabletBreakpoint) {
            @include borderOnly(
              (
                borderSides: map-get($configuration, formInputBorderErrorSidesTablet),
                borderWidth: map-get($configuration, formInputBorderErrorWidthTablet),
                borderStyle: map-get($configuration, formInputBorderErrorStyleTablet),
                borderColor: map-get($configuration, formInputBorderErrorColorTablet)
              )
            );
            border-radius: map-get($configuration, formInputBorderErrorRadiusTablet);

            &:focus {
              @include borderOnly(
                (
                  borderSides: map-get($configuration, formInputBorderErrorFocusSidesTablet),
                  borderWidth: map-get($configuration, formInputBorderErrorFocusWidthTablet),
                  borderStyle: map-get($configuration, formInputBorderErrorFocusStyleTablet),
                  borderColor: map-get($configuration, formInputBorderErrorFocusColorTablet)
                )
              );
              border-radius: map-get($configuration, formInputBorderErrorFocusRadiusTablet);
            }
          }

          // Styles for desktop
          @include above($desktopBreakpoint) {
            @include borderOnly(
              (
                borderSides: map-get($configuration, formInputBorderErrorSidesDesktop),
                borderWidth: map-get($configuration, formInputBorderErrorWidthDesktop),
                borderStyle: map-get($configuration, formInputBorderErrorStyleDesktop),
                borderColor: map-get($configuration, formInputBorderErrorColorDesktop)
              )
            );
            border-radius: map-get($configuration, formInputBorderErrorRadiusDesktop);

            &:focus {
              @include borderOnly(
                (
                  borderSides: map-get($configuration, formInputBorderErrorFocusSidesDesktop),
                  borderWidth: map-get($configuration, formInputBorderErrorFocusWidthDesktop),
                  borderStyle: map-get($configuration, formInputBorderErrorFocusStyleDesktop),
                  borderColor: map-get($configuration, formInputBorderErrorFocusColorDesktop)
                )
              );
              border-radius: map-get($configuration, formInputBorderErrorFocusRadiusDesktop);
            }
          }
        }

        > .fa:first-child {
          border-right-width: map-get($configuration, formInputBorderErrorWidth);
          border-right-style: map-get($configuration, formInputBorderErrorStyle);
          border-right-color: map-get($configuration, formInputBorderErrorColor);

          // Styles for tablet
          @include above($tabletBreakpoint) {
            border-right-width: map-get($configuration, formInputBorderErrorWidthTablet);
            border-right-style: map-get($configuration, formInputBorderErrorStyleTablet);
            border-right-color: map-get($configuration, formInputBorderErrorColorTablet);
          }

          // Styles for desktop
          @include above($desktopBreakpoint) {
            border-right-width: map-get($configuration, formInputBorderErrorWidthDesktop);
            border-right-style: map-get($configuration, formInputBorderErrorStyleDesktop);
            border-right-color: map-get($configuration, formInputBorderErrorColorDesktop);
          }
        }

        &[dir="rtl"] > .fa:first-child {
          border-right: none;
          border-left-width: map-get($configuration, formInputBorderErrorWidth);
          border-left-style: map-get($configuration, formInputBorderErrorStyle);
          border-left-color: map-get($configuration, formInputBorderErrorColor);

          // Styles for tablet
          @include above($tabletBreakpoint) {
            border-left-width: map-get($configuration, formInputBorderErrorWidthTablet);
            border-left-style: map-get($configuration, formInputBorderErrorStyleTablet);
            border-left-color: map-get($configuration, formInputBorderErrorColorTablet);
          }

          // Styles for desktop
          @include above($desktopBreakpoint) {
            border-left-width: map-get($configuration, formInputBorderErrorWidthDesktop);
            border-left-style: map-get($configuration, formInputBorderErrorStyleDesktop);
            border-left-color: map-get($configuration, formInputBorderErrorColorDesktop);
          }
        }
      }
    }

    .form-control {
      @include borderOnly(
        (
          borderSides: map-get($configuration, formInputBorderSides),
          borderWidth: map-get($configuration, formInputBorderWidth),
          borderStyle: map-get($configuration, formInputBorderStyle),
          borderColor: map-get($configuration, formInputBorderColor)
        )
      );
      border-radius: map-get($configuration, formInputBorderRadius);
      padding: map-get($configuration, formInputPaddingTop)
        map-get($configuration, formInputPaddingRight)
        map-get($configuration, formInputPaddingBottom)
        map-get($configuration, formInputPaddingLeft);

      &:focus {
        @include borderOnly(
          (
            borderSides: map-get($configuration, formInputBorderFocusSides),
            borderWidth: map-get($configuration, formInputBorderFocusWidth),
            borderStyle: map-get($configuration, formInputBorderFocusStyle),
            borderColor: map-get($configuration, formInputBorderFocusColor)
          )
        );
        border-radius: map-get($configuration, formInputBorderFocusRadius);
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        @include borderOnly(
          (
            borderSides: map-get($configuration, formInputBorderSidesTablet),
            borderWidth: map-get($configuration, formInputBorderWidthTablet),
            borderStyle: map-get($configuration, formInputBorderStyleTablet),
            borderColor: map-get($configuration, formInputBorderColorTablet)
          )
        );
        border-radius: map-get($configuration, formInputBorderRadiusTablet);
        padding: map-get($configuration, formInputPaddingTopTablet)
          map-get($configuration, formInputPaddingRightTablet)
          map-get($configuration, formInputPaddingBottomTablet)
          map-get($configuration, formInputPaddingLeftTablet);

        &:focus {
          @include borderOnly(
            (
              borderSides: map-get($configuration, formInputBorderFocusSidesTablet),
              borderWidth: map-get($configuration, formInputBorderFocusWidthTablet),
              borderStyle: map-get($configuration, formInputBorderFocusStyleTablet),
              borderColor: map-get($configuration, formInputBorderFocusColorTablet)
            )
          );
          border-radius: map-get($configuration, formInputBorderFocusRadiusTablet);
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        @include borderOnly(
          (
            borderSides: map-get($configuration, formInputBorderSidesDesktop),
            borderWidth: map-get($configuration, formInputBorderWidthDesktop),
            borderStyle: map-get($configuration, formInputBorderStyleDesktop),
            borderColor: map-get($configuration, formInputBorderColorDesktop)
          )
        );
        border-radius: map-get($configuration, formInputBorderRadiusDesktop);
        padding: map-get($configuration, formInputPaddingTopDesktop)
          map-get($configuration, formInputPaddingRightDesktop)
          map-get($configuration, formInputPaddingBottomDesktop)
          map-get($configuration, formInputPaddingLeftDesktop);

        &:focus {
          @include borderOnly(
            (
              borderSides: map-get($configuration, formInputBorderFocusSidesDesktop),
              borderWidth: map-get($configuration, formInputBorderFocusWidthDesktop),
              borderStyle: map-get($configuration, formInputBorderFocusStyleDesktop),
              borderColor: map-get($configuration, formInputBorderFocusColorDesktop)
            )
          );
          border-radius: map-get($configuration, formInputBorderFocusRadiusDesktop);
        }
      }
    }

    .form-group.fl-date-picker.readonly,
    .form-group.fl-time-picker.readonly {
      > .form-control {
        background-color: map-get($configuration, formReadOnlyBackgroundColor);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          background-color: map-get($configuration, formReadOnlyBackgroundColorTablet);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          background-color: map-get($configuration, formReadOnlyBackgroundColorDesktop);
        }
      }
    }

    .form-group.fl-date-picker,
    .form-group.fl-time-picker {
      > .form-control {
        @include borderOnly(
          (
            borderSides: map-get($configuration, formInputBorderSides),
            borderWidth: map-get($configuration, formInputBorderWidth),
            borderStyle: map-get($configuration, formInputBorderStyle),
            borderColor: map-get($configuration, formInputBorderColor)
          )
        );
        border-radius: map-get($configuration, formInputBorderRadius);
        padding: map-get($configuration, formInputPaddingTop)
          calc(45px + #{map-get($configuration, formInputPaddingRight)})
          map-get($configuration, formInputPaddingBottom)
          calc(45px + #{map-get($configuration, formInputPaddingLeft)});

        &:focus {
          @include borderOnly(
            (
              borderSides: map-get($configuration, formInputBorderFocusSides),
              borderWidth: map-get($configuration, formInputBorderFocusWidth),
              borderStyle: map-get($configuration, formInputBorderFocusStyle),
              borderColor: map-get($configuration, formInputBorderFocusColor)
            )
          );
          border-radius: map-get($configuration, formInputBorderFocusRadius);
        }

        // Styles for tablet
        @include above($tabletBreakpoint) {
          @include borderOnly(
            (
              borderSides: map-get($configuration, formInputBorderSidesTablet),
              borderWidth: map-get($configuration, formInputBorderWidthTablet),
              borderStyle: map-get($configuration, formInputBorderStyleTablet),
              borderColor: map-get($configuration, formInputBorderColorTablet)
            )
          );
          border-radius: map-get($configuration, formInputBorderRadiusTablet);
          padding: map-get($configuration, formInputPaddingTopTablet)
            calc(45px + #{map-get($configuration, formInputPaddingRightTablet)})
            map-get($configuration, formInputPaddingBottomTablet)
            calc(45px + #{map-get($configuration, formInputPaddingLeftTablet)});

          &:focus {
            @include borderOnly(
              (
                borderSides: map-get($configuration, formInputBorderFocusSidesTablet),
                borderWidth: map-get($configuration, formInputBorderFocusWidthTablet),
                borderStyle: map-get($configuration, formInputBorderFocusStyleTablet),
                borderColor: map-get($configuration, formInputBorderFocusColorTablet)
              )
            );
            border-radius: map-get($configuration, formInputBorderFocusRadiusTablet);
          }
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          @include borderOnly(
            (
              borderSides: map-get($configuration, formInputBorderSidesDesktop),
              borderWidth: map-get($configuration, formInputBorderWidthDesktop),
              borderStyle: map-get($configuration, formInputBorderStyleDesktop),
              borderColor: map-get($configuration, formInputBorderColorDesktop)
            )
          );
          border-radius: map-get($configuration, formInputBorderRadiusDesktop);
          padding: map-get($configuration, formInputPaddingTopDesktop)
            calc(45px + #{map-get($configuration, formInputPaddingRightDesktop)})
            map-get($configuration, formInputPaddingBottomDesktop)
            calc(45px + #{map-get($configuration, formInputPaddingLeftDesktop)});

          &:focus {
            @include borderOnly(
              (
                borderSides: map-get($configuration, formInputBorderFocusSidesDesktop),
                borderWidth: map-get($configuration, formInputBorderFocusWidthDesktop),
                borderStyle: map-get($configuration, formInputBorderFocusStyleDesktop),
                borderColor: map-get($configuration, formInputBorderFocusColorDesktop)
              )
            );
            border-radius: map-get($configuration, formInputBorderFocusRadiusDesktop);
          }
        }
      }

      > .fa {
        color: $bodyTextColor;

        // Styles for tablet
        @include above($tabletBreakpoint) {
          color: $bodyTextColorTablet;
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          color: $bodyTextColorDesktop;
        }
      }

      > .fa:first-child {
        border-right-width: map-get($configuration, formInputBorderWidth);
        border-right-style: map-get($configuration, formInputBorderStyle);
        border-right-color: map-get($configuration, formInputBorderColor);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          border-right-width: map-get($configuration, formInputBorderWidthTablet);
          border-right-style: map-get($configuration, formInputBorderStyleTablet);
          border-right-color: map-get($configuration, formInputBorderColorTablet);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          border-right-width: map-get($configuration, formInputBorderWidthDesktop);
          border-right-style: map-get($configuration, formInputBorderStyleDesktop);
          border-right-color: map-get($configuration, formInputBorderColorDesktop);
        }
      }

      &[dir="rtl"] > .fa:first-child {
        border-right: none;
        border-left-width: map-get($configuration, formInputBorderWidth);
        border-left-style: map-get($configuration, formInputBorderStyle);
        border-left-color: map-get($configuration, formInputBorderColor);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          border-left-width: map-get($configuration, formInputBorderWidthTablet);
          border-left-style: map-get($configuration, formInputBorderStyleTablet);
          border-left-color: map-get($configuration, formInputBorderColorTablet);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          border-left-width: map-get($configuration, formInputBorderWidthDesktop);
          border-left-style: map-get($configuration, formInputBorderStyleDesktop);
          border-left-color: map-get($configuration, formInputBorderColorDesktop);
        }
      }

      &:focus-within {
        > .fa:first-child {
          border-right-width: map-get($configuration, formInputBorderFocusWidth);
          border-right-style: map-get($configuration, formInputBorderFocusStyle);
          border-right-color: map-get($configuration, formInputBorderFocusColor);

          // Styles for tablet
          @include above($tabletBreakpoint) {
            border-right-width: map-get($configuration, formInputBorderFocusWidthTablet);
            border-right-style: map-get($configuration, formInputBorderFocusStyleTablet);
            border-right-color: map-get($configuration, formInputBorderFocusColorTablet);
          }

          // Styles for desktop
          @include above($desktopBreakpoint) {
            border-right-width: map-get($configuration, formInputBorderFocusWidthDesktop);
            border-right-style: map-get($configuration, formInputBorderFocusStyleDesktop);
            border-right-color: map-get($configuration, formInputBorderFocusColorDesktop);
          }
        }

        &[dir="rtl"] > .fa:first-child {
          border-right: none;
          border-left-width: map-get($configuration, formInputBorderFocusWidth);
          border-left-style: map-get($configuration, formInputBorderFocusStyle);
          border-left-color: map-get($configuration, formInputBorderFocusColor);

          // Styles for tablet
          @include above($tabletBreakpoint) {
            border-left-width: map-get($configuration, formInputBorderFocusWidthTablet);
            border-left-style: map-get($configuration, formInputBorderFocusStyleTablet);
            border-left-color: map-get($configuration, formInputBorderFocusColorTablet);
          }

          // Styles for desktop
          @include above($desktopBreakpoint) {
            border-left-width: map-get($configuration, formInputBorderFocusWidthDesktop);
            border-left-style: map-get($configuration, formInputBorderFocusStyleDesktop);
            border-left-color: map-get($configuration, formInputBorderFocusColorDesktop);
          }
        }
      }
    }

    .radio.radio-icon input[type="radio"] + label > span.check,
    .checkbox.checkbox-icon input[type="checkbox"] + label > span.check {
      border: 1px solid map-get($configuration, formToggleBorderColor);
      background-color: map-get($configuration, formToggleBackgroundColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        border: 1px solid map-get($configuration, formToggleBorderColorTablet);
        background-color: map-get($configuration, formToggleBackgroundColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        border: 1px solid map-get($configuration, formToggleBorderColorDesktop);
        background-color: map-get($configuration, formToggleBackgroundColorDesktop);
      }
    }

    .checkbox.checkbox-icon.readonly input[type="checkbox"] + label > span.check,
    .radio.radio-icon.readonly input[type="radio"] + label > span.check {
      border: 1px solid map-get($configuration, formReadOnlySelectedFillColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        border: 1px solid map-get($configuration, formReadOnlySelectedFillColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        border: 1px solid map-get($configuration, formReadOnlySelectedFillColorDesktop);
      }
    }

    .checkbox.checkbox-icon.readonly input[type="checkbox"]:checked + label > span.check,
    .radio.radio-icon.readonly input[type="radio"]:checked + label > span.check {
      background-color: map-get($configuration, formReadOnlySelectedFillColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: 1px solid map-get($configuration, formReadOnlySelectedFillColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: 1px solid map-get($configuration, formReadOnlySelectedFillColorDesktop);
      }
    }

    .radio.radio-icon input[type="radio"]:checked + label > span.check,
    .checkbox.checkbox-icon input[type="checkbox"]:checked + label > span.check {
      background-color: map-get($configuration, formToggleActiveBackgroundColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, formToggleActiveBackgroundColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, formToggleActiveBackgroundColorDesktop);
      }
    }

    .radio.radio-icon input[type="radio"] + label > span.check > i.fa,
    .checkbox.checkbox-icon input[type="checkbox"] + label > span.check > i.fa {
      color: map-get($configuration, formToggleActiveBackgroundColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        color: map-get($configuration, formToggleActiveBackgroundColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        color: map-get($configuration, formToggleActiveBackgroundColorDesktop);
      }
    }

    .radio.radio-icon input[type="radio"]:checked + label span.check > i.fa,
    .checkbox.checkbox-icon input[type="checkbox"]:checked + label span.check > i.fa {
      color: map-get($configuration, formToggleColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        color: map-get($configuration, formToggleColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        color: map-get($configuration, formToggleColorDesktop);
      }
    }

    .radio.radio-icon input[type="radio"]:checked + label span.check > i.fa {
      &:before {
        background-color: map-get($configuration, formToggleColor);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          background-color: map-get($configuration, formToggleColorTablet);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          background-color: map-get($configuration, formToggleColorDesktop);
        }
      }
    }

    .rtgl-ios + .rtgl-btn,
    .tgl-ios + .tgl-btn {
      background-color: map-get($configuration, formToggleBackgroundColor);
      border: 1px solid map-get($configuration, formToggleBorderColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, formToggleBackgroundColorTablet);
        border: 1px solid map-get($configuration, formToggleBorderColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, formToggleBackgroundColorDesktop);
        border: 1px solid map-get($configuration, formToggleBorderColorDesktop);
      }
    }

    .rtgl-ios + .rtgl-btn:after,
    .tgl-ios + .tgl-btn:after {
      background-color: map-get($configuration, formToggleColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, formToggleColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, formToggleColorDesktop);
      }
    }

    .rtgl-ios:checked + .rtgl-btn,
    .tgl-ios:checked + .tgl-btn {
      background-color: map-get($configuration, formToggleActiveBackgroundColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, formToggleActiveBackgroundColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, formToggleActiveBackgroundColorDesktop);
      }
    }

    .select-proxy-display {
      @include borderOnly(
        (
          borderWidth: map-get($configuration, formInputBorderWidth),
          borderStyle: map-get($configuration, formInputBorderStyle),
          borderColor: map-get($configuration, formInputBorderColor),
          borderSides: map-get($configuration, formInputBorderSides)
        )
      );
      border-radius: map-get($configuration, formInputBorderRadius);
      color: map-get($configuration, formSelectTextColor);
      padding: map-get($configuration, formInputPaddingTop)
        map-get($configuration, formInputPaddingRight)
        map-get($configuration, formInputPaddingBottom)
        map-get($configuration, formInputPaddingLeft);

      &:focus-within {
        box-shadow: 0px 0px 0px $focusOutlineWidth $focusOutlineColor !important;
      }

      &.input-focused {
        box-shadow: 0px 0px 0px $focusOutlineWidth $focusOutlineColor !important;
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        @include borderOnly(
          (
            borderWidth: map-get($configuration, formInputBorderWidthTablet),
            borderStyle: map-get($configuration, formInputBorderStyleTablet),
            borderColor: map-get($configuration, formInputBorderColorTablet),
            borderSides: map-get($configuration, formInputBorderSidesTablet)
          )
        );
        border-radius: map-get($configuration, formInputBorderRadiusTablet);
        color: map-get($configuration, formSelectTextColorTablet);
        padding: map-get($configuration, formInputPaddingTopTablet)
          map-get($configuration, formInputPaddingRightTablet)
          map-get($configuration, formInputPaddingBottomTablet)
          map-get($configuration, formInputPaddingLeftTablet);

        &:focus-within {
          box-shadow: 0px 0px 0px $focusOutlineWidthTablet $focusOutlineColorTablet !important;
        }

        &.input-focused {
          box-shadow: 0px 0px 0px $focusOutlineWidthTablet $focusOutlineColorTablet !important;
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        @include borderOnly(
          (
            borderWidth: map-get($configuration, formInputBorderWidthDesktop),
            borderStyle: map-get($configuration, formInputBorderStyleDesktop),
            borderColor: map-get($configuration, formInputBorderColorDesktop),
            borderSides: map-get($configuration, formInputBorderSidesDesktop)
          )
        );
        border-radius: map-get($configuration, formInputBorderRadiusDesktop);
        color: map-get($configuration, formSelectTextColorDesktop);
        padding: map-get($configuration, formInputPaddingTopDesktop)
          map-get($configuration, formInputPaddingRightDesktop)
          map-get($configuration, formInputPaddingBottomDesktop)
          map-get($configuration, formInputPaddingLeftDesktop);

        &:focus-within {
          box-shadow: 0px 0px 0px $focusOutlineWidthDesktop $focusOutlineColorDesktop !important;
        }

        &.input-focused {
          box-shadow: 0px 0px 0px $focusOutlineWidthDesktop $focusOutlineColorDesktop !important;
        }
      }
    }

    .select-proxy-display.readonly {
      border: 1px solid $formInputBorderColor;
      background-color: map-get($configuration, formReadOnlyBackgroundColor);

      & > .icon {
        background-color: map-get($configuration, formReadOnlySelectedFillColor);
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        border: 1px solid $formInputBorderColor;
        background-color: map-get($configuration, formReadOnlyBackgroundColorTablet);

        & > .icon {
          background-color: map-get($configuration, formReadOnlySelectedFillColorTablet);
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        border: 1px solid $formInputBorderColor;
        background-color: map-get($configuration, formReadOnlyBackgroundColorDesktop);

        & > .icon {
          background-color: map-get($configuration, formReadOnlySelectedFillColorDesktop);
        }
      }
    }

    .select-proxy-display > .icon {
      background-color: map-get($configuration, formSelectArrowBackground);
      color: map-get($configuration, formSelectArrow);
      border-top-right-radius: map-get($configuration, formInputBorderRadius);
      border-bottom-right-radius: map-get($configuration, formInputBorderRadius);
      @include borderOnly(
        (
          borderWidth: map-get($configuration, formInputBorderWidth),
          borderStyle: map-get($configuration, formInputBorderStyle),
          borderColor: map-get($configuration, formInputBorderColor),
          borderSides: "left"
        )
      );

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, formSelectArrowBackgroundTablet);
        color: map-get($configuration, formSelectArrowTablet);
        border-top-right-radius: map-get($configuration, formInputBorderRadiusTablet);
        border-bottom-right-radius: map-get($configuration, formInputBorderRadiusTablet);
        @include borderOnly(
          (
            borderWidth: map-get($configuration, formInputBorderWidthTablet),
            borderStyle: map-get($configuration, formInputBorderStyleTablet),
            borderColor: map-get($configuration, formInputBorderColorTablet),
            borderSides: "left"
          )
        );
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, formSelectArrowBackgroundDesktop);
        color: map-get($configuration, formSelectArrowDesktop);
        border-top-right-radius: map-get($configuration, formInputBorderRadiusDesktop);
        border-bottom-right-radius: map-get($configuration, formInputBorderRadiusDesktop);
        @include borderOnly(
          (
            borderWidth: map-get($configuration, formInputBorderWidthDesktop),
            borderStyle: map-get($configuration, formInputBorderStyleDesktop),
            borderColor: map-get($configuration, formInputBorderColorDesktop),
            borderSides: "left"
          )
        );
      }
    }

    .required-info,
    .required-info-label {
      color: map-get($configuration, formRequiredColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        color: map-get($configuration, formRequiredColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        color: map-get($configuration, formRequiredColorDesktop);
      }
    }

    .input-group {
      &:focus-within {
        box-shadow: 0px 0px 0px $focusOutlineWidth $focusOutlineColor !important;
      }

      &.input-focused {
        box-shadow: 0px 0px 0px $focusOutlineWidth $focusOutlineColor !important;
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        &:focus-within {
          box-shadow: 0px 0px 0px $focusOutlineWidthTablet $focusOutlineColorTablet !important;
        }

        &.input-focused {
          box-shadow: 0px 0px 0px $focusOutlineWidthTablet $focusOutlineColorTablet !important;
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        &:focus-within {
          box-shadow: 0px 0px 0px $focusOutlineWidthDesktop $focusOutlineColorDesktop !important;
        }

        &.input-focused {
          box-shadow: 0px 0px 0px $focusOutlineWidthDesktop $focusOutlineColorDesktop !important;
        }
      }
    }

    .input-group-addon {
      color: $bodyTextColor;

      // Styles for tablet
      @include above($tabletBreakpoint) {
        color: $bodyTextColorTablet;
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        color: $bodyTextColorDesktop;
      }
    }

    .input-group-addon:first-child {
      @include borderOnly(
        (
          borderWidth: map-get($configuration, formInputBorderWidth),
          borderStyle: map-get($configuration, formInputBorderStyle),
          borderColor: map-get($configuration, formInputBorderColor),
          borderSides: "right"
        )
      );

      // Styles for tablet
      @include above($tabletBreakpoint) {
        @include borderOnly(
          (
            borderWidth: map-get($configuration, formInputBorderWidthTablet),
            borderStyle: map-get($configuration, formInputBorderStyleTablet),
            borderColor: map-get($configuration, formInputBorderColorTablet),
            borderSides: "right"
          )
        );
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        @include borderOnly(
          (
            borderWidth: map-get($configuration, formInputBorderWidthDesktop),
            borderStyle: map-get($configuration, formInputBorderStyleDesktop),
            borderColor: map-get($configuration, formInputBorderColorDesktop),
            borderSides: "right"
          )
        );
      }
    }

    [_type="flStarRating"] .rating-star .fa {
      color: map-get($configuration, formStarRating);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        color: map-get($configuration, formStarRatingTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        color: map-get($configuration, formStarRatingDesktop);
      }
    }

    [_type="flStarRating"] .rating-input ~ .readonly.rating-star .fa {
      color: map-get($configuration, formReadOnlyBackgroundColor);

      &:before {
        -webkit-text-stroke: 1px map-get($configuration, formReadOnlySelectedFillColor);
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        color: map-get($configuration, formReadOnlyBackgroundColorTablet);

        &:before {
          -webkit-text-stroke: 1px map-get($configuration, formReadOnlySelectedFillColorTablet);
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        color: map-get($configuration, formReadOnlyBackgroundColorDesktop);

        &:before {
          -webkit-text-stroke: 1px map-get($configuration, formReadOnlySelectedFillColorDesktop);
        }
      }
    }

    [_type="flStarRating"] .rating-input:checked ~ .readonly.rating-star .fa {
      color: map-get($configuration, formReadOnlySelectedFillColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        color: map-get($configuration, formReadOnlySelectedFillColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        color: map-get($configuration, formReadOnlySelectedFillColorDesktop);
      }
    }

    [_type="flStarRating"] .rating-input:checked ~ .rating-star .fa {
      color: map-get($configuration, formStarRatingSelected);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        color: map-get($configuration, formStarRatingSelectedTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        color: map-get($configuration, formStarRatingSelectedDesktop);
      }
    }

    [_type="flSignature"] .field-signature {
      background-color: map-get($configuration, formSignatureFieldBackgroundColor);

      canvas {
        border: map-get($configuration, formInputBorderWidth)
          map-get($configuration, formInputBorderStyle)
          map-get($configuration, formInputBorderColor) !important;
        border-top-width: 0 !important;
        border-left-width: 0 !important;
        border-right-width: 0 !important;
      }

      a {
        color: map-get($configuration, formSignatureClearTextColor);

        &:focus,
        &:hover,
        &:active:focus,
        &:active:hover {
          color: map-get($configuration, formSignatureClearTextColorActive);
        }

        &:focus {
          box-shadow: 0px 0px 0px $focusOutlineWidth $focusOutlineColor !important;
        }
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, formSignatureFieldBackgroundColorTablet);

        canvas {
          border: map-get($configuration, formInputBorderWidthTablet)
            map-get($configuration, formInputBorderStyleTablet)
            map-get($configuration, formInputBorderColorTablet) !important;
        }

        a {
          color: map-get($configuration, formSignatureClearTextColorTablet);

          &:focus,
          &:hover,
          &:active:focus,
          &:active:hover {
            color: map-get($configuration, formSignatureClearTextColorActiveTablet);
          }

          &:focus {
            box-shadow: 0px 0px 0px $focusOutlineWidthTablet $focusOutlineColorTablet !important;
          }
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, formSignatureFieldBackgroundColorDesktop);

        canvas {
          border: map-get($configuration, formInputBorderWidthDesktop)
            map-get($configuration, formInputBorderStyleDesktop)
            map-get($configuration, formInputBorderColorDesktop) !important;
        }

        a {
          color: map-get($configuration, formSignatureClearTextColorDesktop);

          &:focus,
          &:hover,
          &:active:focus,
          &:active:hover {
            color: map-get($configuration, formSignatureClearTextColorActiveDesktop);
          }

          &:focus {
            box-shadow: 0px 0px 0px $focusOutlineWidthDesktop $focusOutlineColorDesktop !important;
          }
        }
      }
    }

    [_type="flSignature"] .signature-editor.readonly .field-signature {
      border-bottom: 1px solid map-get($configuration, formInputBorderColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        border-bottom: 1px solid map-get($configuration, formInputBorderColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        border-bottom: 1px solid map-get($configuration, formInputBorderColorDesktop);
      }
    }

    .form-group div.mce-edit-area {
      background-color: map-get($configuration, formReadOnlyBackgroundColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, formReadOnlyBackgroundColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, formReadOnlyBackgroundColorDesktop);
      }
    }

    .form-group .mce-tinymce > .mce-container-body.mce-stack-layout,
    .form-group
      .tinymce-mobile-outer-container:not(.tinymce-mobile-fullscreen-maximized)
      .tinymce-mobile-editor-socket {
      @include borderOnly(
        (
          borderWidth: map-get($configuration, formInputBorderWidth),
          borderStyle: map-get($configuration, formInputBorderStyle),
          borderColor: map-get($configuration, formInputBorderColor),
          borderSides: map-get($configuration, formInputBorderSides)
        )
      );

      border-radius: map-get($configuration, formInputBorderRadius);
      overflow: hidden;

      &.focus-outline {
        box-shadow: 0px 0px 0px $focusOutlineWidth $focusOutlineColor !important;
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        @include borderOnly(
          (
            borderWidth: map-get($configuration, formInputBorderWidthTablet),
            borderStyle: map-get($configuration, formInputBorderStyleTablet),
            borderColor: map-get($configuration, formInputBorderColorTablet),
            borderSides: map-get($configuration, formInputBorderSidesTablet)
          )
        );

        &.focus-outline {
          box-shadow: 0px 0px 0px $focusOutlineWidthTablet $focusOutlineColorTablet !important;
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        @include borderOnly(
          (
            borderWidth: map-get($configuration, formInputBorderWidthDesktop),
            borderStyle: map-get($configuration, formInputBorderStyleDesktop),
            borderColor: map-get($configuration, formInputBorderColorDesktop),
            borderSides: map-get($configuration, formInputBorderSidesDesktop)
          )
        );

        &.focus-outline {
          box-shadow: 0px 0px 0px $focusOutlineWidthDesktop $focusOutlineColorDesktop !important;
        }
      }
    }

    .sending-form {
      color: $bodyTextColor;

      // Styles for tablet
      @include above($tabletBreakpoint) {
        color: $bodyTextColorTablet;
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        color: $bodyTextColorDesktop;
      }
    }

    .fl-form .spinner-overlay {
      border-top-color: rgba($spinnerColor, 0.3);
      border-right-color: rgba($spinnerColor, 0.3);
      border-bottom-color: rgba($spinnerColor, 0.3);
      border-left-color: $linkColor;

      // Styles for tablet
      @include above($tabletBreakpoint) {
        border-top-color: rgba($spinnerColorTablet, 0.3);
        border-right-color: rgba($spinnerColorTablet, 0.3);
        border-bottom-color: rgba($spinnerColorTablet, 0.3);
        border-left-color: $linkColorTablet;
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        border-top-color: rgba($spinnerColorDesktop, 0.3);
        border-right-color: rgba($spinnerColorDesktop, 0.3);
        border-bottom-color: rgba($spinnerColorDesktop, 0.3);
        border-left-color: $linkColorDesktop;
      }
    }

    .fileUpload-disabled label {
      background-color: map-get($configuration, formReadOnlySelectedFillColor) !important;

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, formReadOnlySelectedFillColorTablet) !important;
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, formReadOnlySelectedFillColorTablet) !important;
      }
    }
  }
}

@include formBuilder();

.form-control {
  @include borderOnly(
    (
      borderSides: $formInputBorderSides,
      borderWidth: $formInputBorderWidth,
      borderStyle: $formInputBorderStyle,
      borderColor: $formInputBorderColor
    )
  );

  border-radius: $formInputBorderRadius;
}

.fileUpload {
  padding-top: $focusOutlineWidth;
  padding-bottom: $focusOutlineWidth;

  // Styles for tablet
  @include above($tabletBreakpoint) {
    padding-top: $focusOutlineWidthTablet;
    padding-bottom: $focusOutlineWidthTablet;

    .btn-primary > span {
      padding-right: $primaryButtonPaddingRightTablet;
    }
  }

  // Styles for desktop
  @include above($desktopBreakpoint) {
    padding-top: $focusOutlineWidthDesktop;
    padding-bottom: $focusOutlineWidthDesktop;

    .btn-primary > span {
      padding-right: $primaryButtonPaddingRightDesktop;
    }
  }
}
